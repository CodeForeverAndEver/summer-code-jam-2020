# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile hacked together to give a basic LXDE/Ubuntu setup. Based on default
# config file and configuration options found on blogs and stack overflow.
#
# You can use another desktop environment if you like. LXDE was chosen to be
# understandable to windows users and not take up much system resources.

# Don't change "2", it's the Vagrantfile version specifier.
Vagrant.configure("2") do |config|
  # Official vagrant 
  # https://docs.vagrantup.com.

  # based off of the official ubuntu vagrant base box.
  config.vm.box = "ubuntu/bionic64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Forward 8000 so we can see django from outside the VM
  config.vm.network "forwarded_port", guest: 8000, host: 8080

  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = true
  
    # Customize the amount of memory on the VM:
    vb.memory = "8192" # set to multiples of 1024, at least 6gb

    # try for better graphics / desktop performance, sources:
    # 	https://github.com/matthewjberger/eager/blob/master/Vagrantfile
    #   https://stackoverflow.com/questions/24231620/how-to-set-vagrant-virtualbox-video-memory
    vb.customize ["modifyvm", :id, "--vram", "128"] # how many MB of VRAM
    vb.customize ["modifyvm", :id, "--accelerate3d", "on"] # extra 3d performance
  end

$toinstall = <<-SHELL
	# this install section is heavily cribbed from the following post:
	# https://medium.com/@tonyeung85/minimal-vagrant-ubuntu-desktop-for-development-248c173cc5a2

	# update apt & upgrade packages
	sudo apt-get update && sudo apt-get upgrade -y

	# install the following to make upgrading VBox modules easier: (https://linuxize.com/post/how-to-install-virtualbox-guest-additions-in-ubuntu/)
	# 	build tools - so anything that needs gcc/g++ can get built
	#   dkms - some kernel module tool
	#   linux-headers-$(uname -r) - some sort of linux header package that matches kernel version
	sudo apt-get install -y build-essential dkms linux-headers-$(uname -r)


	# so we can add keys of various software. the two gpgs don't clash, apparently.
	sudo apt-get install gnupg2 gnupg gnupg-agent

	# docker install
	sudo apt remove docker docker-engine docker.io
	sudo apt install apt-transport-https ca-certificates curl software-properties-common
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
	sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
	sudo apt update
	sudo apt install docker-ce	

	# vscode will be installed for us
	sudo curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
	sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
	sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'

	sudo apt-get update -y
	sudo apt-get install -y code
	sudo apt-get install -y git

	# installs node with npm included.
	curl -sL https://rpm.nodesource.com/setup_lts.x | sudo bash -
	sudo apt-get install -y nodejs

	# Default ubuntu desktop & some sort of  X or wayland environment needed to run it
	# note: This is astoundingly inefficient, but I can't figure out how to cleanly
	# separate the x dependencies for MATE right now.
	sudo apt-get install -y lubuntu-desktop

	# install google chrome
	wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
	sudo dpkg -i google-chrome-stable_current_amd64.deb
	sudo apt-get -f -y install

	# some bookkeeping, not sure if this is all needed
	sudo chown -R vagrant:vagrant /home/vagrant/*
	mkdir /home/vagrant/Desktop

	# restart so we can have a graphical session
	sudo shutdown -r now

SHELL
	#actually run the above script during provisioning.
config.vm.provision "shell", inline: $toinstall, privileged: false

  # shouldn't need to do this, it should auto-mount the local
  # directory to /vagrant
  # config.vm.synced_folder "./", "/shinysheep"
  
end
